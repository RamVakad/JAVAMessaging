/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChatClient.java
 *
 * Created on Dec 4, 2011, 8:27:56 AM
 */
package client;

import javax.swing.JOptionPane;

/**
 *
 * @author Ram
 */
public class ClientGUI extends javax.swing.JFrame {

    private Client client;

    /**
     * Creates new form ChatClient
     */
    public ClientGUI() {
        super("Chat Client");
        initComponents();
        target.add("All");
    }

    public void setClient(Client client) {
        this.client = client;
        this.setTitle("Chat Client - Connected as " + client.getName() + ".");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messages = new javax.swing.JScrollPane();
        viewArea = new javax.swing.JTextArea();
        message = new javax.swing.JTextField();
        send = new javax.swing.JButton();
        users = new java.awt.List();
        target = new java.awt.Choice();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        viewArea.setColumns(20);
        viewArea.setEditable(false);
        viewArea.setRows(5);
        viewArea.setDoubleBuffered(true);
        viewArea.setMaximumSize(new java.awt.Dimension(2147483647, 21));
        messages.setViewportView(viewArea);

        message.setText("Input your message here and click \"Send!\"");
        message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageActionPerformed(evt);
            }
        });

        send.setText("Send!");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        users.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersActionPerformed(evt);
            }
        });

        target.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(messages, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(target, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(users, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(users, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                    .addComponent(messages, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(target, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                        .addGap(1, 1, 1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(send)
                        .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageActionPerformed
    sendActionPerformed(evt);
}//GEN-LAST:event_messageActionPerformed

private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
    if (message.getText() != null && !message.getText().equals("")) {
        try {
            if (message.getText().startsWith("@")) {
                JOptionPane.showMessageDialog(null, "Do not start sentences with '@'.", "Alert", JOptionPane.PLAIN_MESSAGE);
                return;
            }
            String prefix = "";
            if (!target.getSelectedItem().equals("All")) {
                prefix += "@whisper " + target.getSelectedItem() + " ";
            }
            client.sendMessage(prefix + message.getText());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    message.setText("");
}//GEN-LAST:event_sendActionPerformed

private void usersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersActionPerformed
    if (evt.getActionCommand().equals(client.getName())) {
        return;
    }
    new UserTools(evt.getActionCommand(), this);
}//GEN-LAST:event_usersActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField message;
    private javax.swing.JScrollPane messages;
    private javax.swing.JButton send;
    private java.awt.Choice target;
    private java.awt.List users;
    private javax.swing.JTextArea viewArea;
    // End of variables declaration//GEN-END:variables

    public void addMessage(String str) {
        viewArea.append("\r\n" + str);
    }

    public void addName(String name) {
        if (!client.names.contains(name)) {
            client.names.add(name);
            users.add(name);
        }
    }

    public void removeName(String name) {
        if (client.names.contains(name)) {
            users.remove(name);
        }
        if (client.targets.contains(name)) {
            target.remove(name);
        }
    }

    public void addTarget(String name) {
        if (client.targets.size() > 4) {
            client.targets.remove(0);
        }
        if (!client.targets.contains(name)) {
            client.targets.add(name);
            target.add(name);
        }
        target.select(name);
    }
}
